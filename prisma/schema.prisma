// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator typegraphql {
  provider                  = "typegraphql-prisma"
  omitOutputFieldsByDefault = "createdAt,updatedAt"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  NORMAL
  ADMIN
}

enum Currency {
  EUR
}

enum PurchaseOrderStatus {
  SUBMITTED
  PAID
  ORDERED_FROM_VENDOR
  FULFILLED
}

model User {
  id                  Int       @id @default(autoincrement())
  name                String
  phoneNumber         String    @unique
  otp                 Int
  otpCreatedAt        DateTime
  email               String    @unique
  password            String
  role                Role
  phoneNumberVerified DateTime?
  emailVerified       DateTime?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  logins              Login[]
  accessTokens        AccessToken[]
  items               Item[]
  purchaseOrders      PurchaseOrder[]
}

model Login {
  id          Int         @id @default(autoincrement())
  ipAddress   String?     @db.Inet
  userId      Int
  user        User        @relation(fields: [userId], references: [id])
  tokenValue  String
  accessToken AccessToken @relation(fields: [tokenValue], references: [value])
  explicit    Boolean
  createdAt   DateTime    @default(now())
}

model AccessToken {
  value   String   @id
  user    User     @relation(fields: [userId], references: [id])
  userId  Int
  logins  Login[]
  expired Boolean  @default(false)
}

model Product {
  id                    Int       @id @default(autoincrement())
  name                  String
  upc                   String?
  description           String?
  amazonASIN            String?
  country               String?
  brand                 String?
  model                 String?
  color                 String?
  weightInKgs           Float?
  widthInCms            Float?
  heightInCms           Float?
  depthInCms            Float?
  currency              Currency
  price                 Decimal   @db.Money
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  items                 Item[]
  purchaseOrderEntries  PurchaseOrderEntry[]
}

model Item {
  id          Int      @id @default(autoincrement())
  userId      Int
  user        User     @relation(fields: [userId], references: [id])
  code        String   @unique
  name        String
  description String?
  productId   Int?
  product     Product? @relation(fields: [productId], references: [id])
  weightInKgs Float?
  widthInCms  Float?
  heightInCms Float?
  depthInCms  Float?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model PurchaseOrder {
  id          Int                 @id @default(autoincrement())
  userId      Int
  user        User                @relation(fields: [userId], references: [id])
  price       Decimal             @db.Money
  status      PurchaseOrderStatus
  createdAt   DateTime            @default(now())
  updatedAt   DateTime  @updatedAt
  entries     PurchaseOrderEntry[]
}

model PurchaseOrderEntry {
  id          Int           @id @default(autoincrement())
  orderId     Int
  order       PurchaseOrder @relation(fields: [orderId], references: [id])
  quantity    Int
  productId   Int
  product     Product       @relation(fields: [productId], references: [id])
  currency    Currency
  unitPrice   Decimal       @db.Money
  createdAt   DateTime      @default(now())
}
